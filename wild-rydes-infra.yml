AWSTemplateFormatVersion: '2010-09-09'
Description: Verma Assignment - AWS ECS Fargate Deployment with CI/CD and Monitoring

Parameters:
  GitHubOwner:
    Type: String
    Description: Your GitHub username
  GitHubRepo:
    Type: String
    Default: todo-app
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch name
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token (store in AWS Secrets Manager or provide manually)

Resources:
  VermaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Verma-vpc

  VermaPublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VermaVPC
    Properties:
      VpcId: !Ref VermaVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ca-central-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Verma-public-subnet-1

  VermaPublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VermaVPC
    Properties:
      VpcId: !Ref VermaVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ca-central-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Verma-public-subnet-2

  VermaPrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VermaVPC
    Properties:
      VpcId: !Ref VermaVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ca-central-1a
      Tags:
        - Key: Name
          Value: Verma-private-subnet-1

  VermaPrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VermaVPC
    Properties:
      VpcId: !Ref VermaVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ca-central-1b
      Tags:
        - Key: Name
          Value: Verma-private-subnet-2

  VermaInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Verma-igw

  VermaVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VermaVPC
      - VermaInternetGateway
    Properties:
      VpcId: !Ref VermaVPC
      InternetGatewayId: !Ref VermaInternetGateway

  VermaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VermaVPC
    Properties:
      VpcId: !Ref VermaVPC
      Tags:
        - Key: Name
          Value: verma-public-rt

  VermaPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - VermaPublicRouteTable
      - VermaVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref VermaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VermaInternetGateway

  VermaPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - VermaPublicSubnet1
      - VermaPublicRouteTable
    Properties:
      SubnetId: !Ref VermaPublicSubnet1
      RouteTableId: !Ref VermaPublicRouteTable

  VermaPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - VermaPublicSubnet2
      - VermaPublicRouteTable
    Properties:
      SubnetId: !Ref VermaPublicSubnet2
      RouteTableId: !Ref VermaPublicRouteTable

  VermaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VermaVPC
    Properties:
      VpcId: !Ref VermaVPC
      Tags:
        - Key: Name
          Value: Verma-private-rt

  VermaNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VermaNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - VermaNATGatewayEIP
      - VermaPublicSubnet1
    Properties:
      AllocationId: !GetAtt VermaNATGatewayEIP.AllocationId
      SubnetId: !Ref VermaPublicSubnet1
      Tags:
        - Key: Name
          Value: Verma-nat

  VermaPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - VermaPrivateRouteTable
      - VermaNATGateway
    Properties:
      RouteTableId: !Ref VermaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VermaNATGateway

  VermaPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - VermaPrivateSubnet1
      - VermaPrivateRouteTable
    Properties:
      SubnetId: !Ref VermaPrivateSubnet1
      RouteTableId: !Ref VermaPrivateRouteTable

  VermaPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - VermaPrivateSubnet2
      - VermaPrivateRouteTable
    Properties:
      SubnetId: !Ref VermaPrivateSubnet2
      RouteTableId: !Ref VermaPrivateRouteTable

  # --- Security Groups ---
  VermaALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VermaVPC
    Properties:
      GroupDescription: Security group for Verma ALB
      VpcId: !Ref VermaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Verma-alb-sg

  VermaECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - VermaVPC
      - VermaALBSecurityGroup
    Properties:
      GroupDescription: Security group for Verma ECS tasks
      VpcId: !Ref VermaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref VermaALBSecurityGroup
      Tags:
        - Key: Name
          Value: Verma-ecs-sg

  # --- Application Load Balancer ---
  VermaLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - VermaPublicSubnet1
      - VermaPublicSubnet2
      - VermaALBSecurityGroup
    Properties:
      Name: Verma-alb
      Subnets:
        - !Ref VermaPublicSubnet1
        - !Ref VermaPublicSubnet2
      SecurityGroups:
        - !Ref VermaALBSecurityGroup
      Scheme: internet-facing
      Type: application

  VermaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - VermaVPC
    Properties:
      Name: Verma-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VermaVPC
      TargetType: ip
      HealthCheckPath: /

  VermaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - VermaLoadBalancer
      - VermaTargetGroup
    Properties:
      LoadBalancerArn: !Ref VermaLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref VermaTargetGroup

  # --- ECS Cluster ---
  VermaECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Verma-ecs-cluster

  # --- CloudWatch Log Group for ECS Tasks ---
  VermaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/Verma-todo-app
      RetentionInDays: 7

  # --- ECS Task Definition ---
  VermaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - VermaTaskExecutionRole
      - VermaLogGroup
    Properties:
      Family: Verma-todo-app-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt VermaTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: todo-app
          Image: 827410396373.dkr.ecr.ca-central-1.amazonaws.com/Verma-todo-app-repo:latest
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref VermaLogGroup
              awslogs-region: ca-central-1
              awslogs-stream-prefix: todo-app

  VermaTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # --- ECS Service ---
  VermaECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - VermaECSCluster
      - VermaTaskDefinition
      - VermaECSSecurityGroup
      - VermaListener
    Properties:
      Cluster: !Ref VermaECSCluster
      ServiceName: Verma-ecs-service
      TaskDefinition: !Ref VermaTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref VermaPrivateSubnet1
            - !Ref VermaPrivateSubnet2
          SecurityGroups:
            - !Ref VermaECSSecurityGroup
      LoadBalancers:
        - ContainerName: todo-app
          ContainerPort: 3000
          TargetGroupArn: !Ref VermaTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  # --- CodeBuild Role ---
  VermaCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VermaCodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                  - logs:*
                  - s3:*
                Resource: '*'
                
  VermaCodePipelineArtifactsBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: !Sub verma-codepipeline-artifacts-${AWS::AccountId}
              

  # --- CodeBuild Project ---
  VermaCodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - VermaCodeBuildRole
      - VermaCodePipelineArtifactsBucket
    Properties:
      Name: Verma-codebuild
      ServiceRole: !GetAtt VermaCodeBuildRole.Arn
      Artifacts:
        Type: S3
        Location: !Sub Verma-codepipeline-artifacts-${AWS::AccountId}
        Name: BuildArtifact
        NamespaceType: NONE
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: ca-central-1
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: Verma-todo-app-repo
          - Name: IMAGE_TAG
            Value: latest
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubOwner}/${GitHubRepo}.git
        BuildSpec: buildspec.yml

  # --- CodePipeline Role ---
  VermaCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: VermaCodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - ecs:*
                  - s3:*
                  - iam:PassRole
                Resource: '*'

  # --- CodePipeline ---
  VermaCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - VermaCodePipelineRole
      - VermaCodeBuildProject
      - VermaECSService
      - VermaCodePipelineArtifactsBucket
    Properties:
      RoleArn: !GetAtt VermaCodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub Verma-codepipeline-artifacts-${AWS::AccountId}
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
        - Name: Approval
          Actions:
            - Name: ManualApproval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref VermaCodeBuildProject
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ClusterName: !Ref VermaECSCluster
                ServiceName: !Ref VermaECSService
                FileName: imagedefinitions.json

  # --- SNS Topic for CloudWatch Alarm ---
  AlarmSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Verma-cloudwatch-alarms

     # --- SNS Subscription ---
  AlarmSNSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - AlarmSNS
    Properties:
      Protocol: email
      Endpoint: "iammansi3006@gmail.com"
      TopicArn: !Ref AlarmSNS

  # --- CloudWatch Alarm for Deployment Failures ---
  DeploymentFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - VermaCodePipeline
      - AlarmSNS
    Properties:
      AlarmName: VermacloudwatchDeploymentFailureAlarm
      AlarmDescription: Alarm for CodePipeline deployment failures
      Namespace: AWS/CodePipeline
      MetricName: PipelineExecutionFailed
      Dimensions:
        - Name: PipelineName
          Value: !Ref VermaCodePipeline
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmSNS
      TreatMissingData: notBreaching

Outputs:
  LoadBalancerURL:
    Description: URL of the Application Load Balancer
    Value: !Sub http://${VermaLoadBalancer.DNSName}